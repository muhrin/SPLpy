#!/usr/bin/env python

__author__ = 'Martin Uhrin'

import argparse
import logging
import multiprocessing

from pymatgen.apps.borg.queen import BorgQueen
from splpy.lj.assimilate import LjToDbTaskDrone


def main():
    # create logger with 'splpy'
    logger = logging.getLogger('splpy')
    logger.setLevel(logging.DEBUG)
    # create file handler which logs even debug messages
    fh = logging.FileHandler('lj2db.log')
    fh.setLevel(logging.DEBUG)
    # create console handler with a higher log level
    #ch = logging.StreamHandler()
    #ch.setLevel(logging.INFO)
    # create formatter and add it to the handlers
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    #ch.setFormatter(formatter)
    # add the handlers to the logger
    logger.addHandler(fh)
    #logger.addHandler(ch)


    parser = argparse.ArgumentParser(
        description='Insert Lennard-Jones structures into a database with potential parameters')
    parser.add_argument('assimilate_path', default='.', nargs='?',
                        help='The folder containing potparams files')
    parser.add_argument('--host', default="127.0.0.1", help='The MongoDB host to insert to')
    parser.add_argument("--port", dest="port", type=int, default=27017,
                        help="Port to run the server on (default: 27017)")
    parser.add_argument("-t", '--tags', help='Tag this set of structures with one or more tags, separate with commas.')
    parser.add_argument("-n", "--ncpus", dest="ncpus", type=int,
                        default=None,
                        help="Number of CPUs to use in inserting. If "
                             "not specified, multiprocessing will use "
                             "the number of cpus detected.")
    parser.add_argument("--update-duplicates", dest="update_duplicates", action='store_true',
                         help="Check for duplicates in database and update if exist, insert otherwise.")
    parser.add_argument("--no-update-duplicates", dest="update_duplicates", action='store_false',
                         help="Check for duplicates in database and don't update if exist, insert otherwise.")
    parser.set_defaults(update_duplicates=None)

    args = parser.parse_args()

    tags = None
    if args.tags is not None:
        tags = args.tags.split(',')

    drone = LjToDbTaskDrone(args.host, args.port, tags=tags, update_duplicates=args.update_duplicates)
    ncpus = multiprocessing.cpu_count() if not args.ncpus else args.ncpus
    queen = BorgQueen(drone, args.assimilate_path, ncpus)
    #entries = queen.get_data()


if __name__ == '__main__':
    main()
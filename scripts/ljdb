#!/usr/bin/env python

"""
A helper script for interacting with a Lennard-Jones database
"""

__author__ = "Martin Uhrin"
__copyright__ = "Copyright 2014, Martin Uhrin"
__version__ = "0.2.0"
__maintainer__ = "Martin Uhrin"
__email__ = "martin.uhrin.10@ucl.ac.uk"
__date__ = "Aug 2, 2014"

import argparse
import datetime
import getpass
import json
import logging
import multiprocessing
import os.path
import StringIO
import sys
import yaml

import bson.objectid

import pymongo

import pymatgen as mg
from pymatgen.core.composition import Composition

import matgendb as mgdb
import matgendb.util

from pymatgen.apps.borg.queen import BorgQueen
import pymatgen.analysis.structure_matcher as structure_matcher

import splpy.util
import splpy.lj as lj
import splpy.lj.util
import splpy.resio
import splpy.interval
import splpy.map
from splpy.lj.assimilate import LjToDbTaskDrone
from splpy.lj.query_engine import LjQueryEngine
from splpy.lj.db_query import VisitationEngine
import splpy.lj.db_crawl as db_crawl

_log = logging.getLogger("lj")  # parent


# Genetic stuff that's common too all query types
def init_criteria(args):
    criteria = parse_criteria_or_die(args.criteria)
    if criteria is None:
        criteria = dict()

    try:
        if args.stoichiometry:
            criteria['pretty_formula'] = args.stoichiometry.reduced_formula
    except AttributeError:
        pass
    try:
        if args.id:
            criteria['_id'] = bson.objectid.ObjectId(args.id)
    except AttributeError:
        pass

    return criteria


def init_db(args):
    d = splpy.lj.util.DB.DEFAULT_SETTINGS
    doc = {}
    print("Please supply the following configuration values")
    print("(press Enter to accept the defaults)\n")
    for k, v in d:
        val = raw_input("Enter {} (default: {}) : ".format(k, v))
        doc[k] = val if val else v
    doc["port"] = int(doc["port"])  # enforce the port as an int
    with open(args.config_file, "w") as f:
        json.dump(doc, f, indent=4, sort_keys=True)
    print("\nConfiguration written to {}!".format(args.config_file))


def update_db(args):
    FORMAT = "%(relativeCreated)d msecs : %(message)s"

    if args.logfile:
        logging.basicConfig(level=logging.INFO, format=FORMAT, filename=args.logfile)
    else:
        logging.basicConfig(level=logging.INFO, format=FORMAT)

    d = mgdb.util.get_settings(args.config_file)

    _log.info("Db insertion started at {}.".format(datetime.datetime.now()))
    additional_fields = {"author": args.author, "tags": args.tag}
    drone = LjToDbTaskDrone(
        host=d["host"], port=d["port"], database=d["database"],
        user=d["admin_user"], password=d["admin_password"],
        collection=d["collection"], update_duplicates=args.update_duplicates,
        force_insert=args.force_insert, additional_fields=additional_fields)
    ncpus = multiprocessing.cpu_count() if not args.ncpus else args.ncpus
    _log.info("Using {} cpus...".format(ncpus))
    queen = BorgQueen(drone, number_of_drones=ncpus)
    if ncpus == 1:
        queen.serial_assimilate(args.directory)
    else:
        queen.parallel_assimilate(args.directory)
    _log.info("Db update completed at {}.".format(datetime.datetime.now()))
    _log.info("{} parameter points inserted.".format(len(queen.get_data())))


def crawl_db(args):
    d = mgdb.util.get_settings(args.config_file)
    qe = LjQueryEngine(host=d["host"], port=d["port"], database=d["database"],
                       user=d["readonly_user"], password=d["readonly_password"],
                       collection=d["collection"], aliases_config=d.get("aliases_config", None))
    criteria = parse_criteria_or_die(args.criteria)

    functions = list()
    if args.prune:
        functions.append(db_crawl.Prune())
    if args.refine:
        functions.append(db_crawl.Refine(args.refine, args.refine_dist, args.refine_limit))
    if args.prototype:
        functions.append(db_crawl.assign_prototypes)

    params_range = lj.db_query.LennardJonesSearchRange()
    if criteria:
        if "potential.params" in criteria:
            params_range = lj.db_query.LennardJonesSearchRange.from_dict(criteria.pop("potential.params"))

    params = db_crawl.get_next_param_to_crawl(qe, params_range)
    while params:
        _log.info("Crawling parameter point {}".format(params["_id"]))
        # Call all the selected functions
        for func in functions:
            func(params, qe)

        # Get the next one
        params = db_crawl.get_next_param_to_crawl(qe, params_range)


def query_db(args):
    from prettytable import PrettyTable

    # Set up a connection to the database
    d = mgdb.util.get_settings(args.config_file)
    qe = LjQueryEngine(host=d["host"], port=d["port"], database=d["database"],
                       user=d["readonly_user"], password=d["readonly_password"],
                       collection=d["collection"], aliases_config=d.get("aliases_config", None))

    criteria = init_criteria(args)

    # TODO: document this 'feature' --dang 4/4/2013
    is_a_file = lambda s: len(s) == 1 and s[0].startswith(':')
    if is_a_file(args.properties):
        with open(args.properties[0][1:], 'rb') as f:
            props = [s.strip() for s in f]
    else:
        props = args.properties

    if args.dump_json:
        for r in qe.query(properties=props, criteria=criteria):
            print(json.dumps(r, cls=mgdb.util.MongoJSONEncoder))
    else:
        t = PrettyTable(props)
        t.float_format = "4.4"
        cur = qe.query(properties=props, criteria=criteria)
        if args.sort and len(args.sort) > 0:
            cur.sort(parse_sort_tokens(args.sort))
        if args.limit:
            cur.limit(args.limit)
        for r in cur:
            t.add_row([r[p] for p in props])
        print(t)


def get_from_db(args):
    d = mgdb.util.get_settings(args.config_file)
    collection = args.collection if args.collection else d["collection"]
    qe = LjQueryEngine(host=d["host"], port=d["port"], database=d["database"],
                       user=d["readonly_user"], password=d["readonly_password"],
                       collection=collection, aliases_config=d.get("aliases_config", None))

    criteria = init_criteria(args)
    properties = ["_id", "name", "times_found", "energy", "spacegroup.symbol", "pressure", "structure"]

    cur = qe.query(properties=properties, criteria=criteria)
    if args.sort is not None and len(args.sort) > 0:
        cur.sort(parse_sort_tokens(args.sort))
    if args.limit is not None:
        cur.limit(args.limit)
    for doc in cur:
        str = mg.core.Structure.from_dict(doc["structure"])
        sg = doc.get("spacegroup")
        if sg is not None:
            sg = sg.get("symbol")
        res = splpy.resio.Res(str, doc.get("name"), doc.get("pressure"), doc.get("energy"),
                              doc.get("spacegroup.symbol"), doc.get("times_found"))
        res.write_file("{}.res".format(doc["_id"]))


def get_unique_from_db(args):
    class LowestEnergyStore:
        def __init__(self, lowest, limit):
            self.lowest = lowest
            self.limit = limit

        def __call__(self, results):
            results.sort('energy', pymongo.ASCENDING)
            if self.limit is not None:
                results.limit(self.limit)
            for doc in results:
                formula = doc["pretty_formula"]
                spacegroup = doc["spacegroup.number"]

                formula_dict = self.lowest.get(formula)
                if formula_dict is None:
                    formula_dict = dict()
                    self.lowest[formula] = formula_dict

                entries = formula_dict.get(spacegroup)
                if entries is None:
                    entries = list()
                    formula_dict[spacegroup] = entries

                entries.append(doc)

    d = mgdb.util.get_settings(args.config_file)
    qe = LjQueryEngine(host=d["host"], port=d["port"], database=d["database"],
                       user=d["readonly_user"], password=d["readonly_password"],
                       collection=d["collection"], aliases_config=d.get("aliases_config", None))

    properties = ["_id", "name", "times_found", "energy", "spacegroup.symbol", "spacegroup.number", "pressure",
                  "structure", "pretty_formula"]

    criteria = init_criteria(args)

    ve = VisitationEngine(qe)
    params_range = lj.db_query.LennardJonesSearchRange()
    if "potential.params" in criteria:
        params_range = lj.db_query.LennardJonesSearchRange.from_dict(criteria.pop("potential.params"))
    ve.add(splpy.lj.db_query.VisitParamPoints(params_range))
    ve.add(splpy.lj.db_query.visit_distinct_formulae)

    lowest = dict()
    getter = LowestEnergyStore(lowest, limit=args.limit)
    ve.run_queries(getter, properties=properties)

    matcher = structure_matcher.StructureMatcher()

    print("Found {} stoichiometries".format(len(lowest)))
    while len(lowest) > 0:
        formula, spacegroups = lowest.popitem()
        for sg, docs in spacegroups.iteritems():
            strs = list()
            for doc in docs:
                str = mg.Structure.from_dict(doc["structure"])
                # Store the document with the structure so we can use it later
                str.splpy_doc = doc
                strs.append(str)

            groups = matcher.group_structures(strs)
            print("{}-{}:".format(formula, sg)),
            for group in groups:
                str = group[0]

                doc = str.splpy_doc
                res = splpy.resio.Res(str, doc.get("name"), doc.get("pressure"), doc.get("energy"),
                                      doc.get("spacegroup.symbol"), doc.get("times_found"))
                filename = "{}.res".format(doc["_id"])
                print(filename),
                res.write_file(filename)
            print('')


def map_from_db(args):
    import subprocess

    def process_properties(args, lowest, query_engine):
        if args.property == "prototype":
            protos = query_engine.db["prototypes"]
            for formula, params_map in lowest.iteritems():
                # Get the set of all prototype ids we need
                proto_ids = set([doc["prototype_id"] for doc in params_map.itervalues()])
                proto_ids.discard(None)

                proto_values = dict()
                for proto_id in proto_ids:
                    value = None
                    doc = protos.find({"_id": proto_id})[0]
                    if "structure_type" in doc:
                        value = doc["structure_type"]
                    else:
                        if "strukturbericht" in doc:
                            value = doc["structure_type"]
                        elif "pearson" in doc:
                            value = "{} ({})".format(doc["spacegroup.symbol"], doc["pearson"])

                    if value:
                        proto_values[proto_id] = value

                # Set the values for each of the parameter points
                for doc in params_map.itervalues():
                    if doc["prototype_id"] in proto_values:
                        doc["prototype"] = proto_values[doc["prototype_id"]]
                    else:
                        # Use the spacegroup as a fallback
                        doc["prototype"] = doc["spacegroup.symbol"]


    def to_latex_string(interaction_string):
        tokens = interaction_string.split('.')

        n_toks = len(tokens)
        if n_toks == 0:
            return

        latex = ["$"]
        # Build up the string
        if tokens[-1] in ["epsilon", "sigma"]:
            latex.append("\{}".format(tokens[-1]))
        elif tokens[-1] is "rcut":
            latex.append("r_{cut}")
        else:
            latex.append(tokens[-1])

        if n_toks > 1:
            species_pair = splpy.util.OrderedPair.from_string(tokens[-2])
            latex.append("_\mathrm{{{}{}}}".format(species_pair.first, species_pair.second))

        latex.append("$")
        return ''.join(latex)

    class LowestEnergyStore:
        def __init__(self, lowest):
            self.lowest = lowest

        def __call__(self, results):
            # This is a bid dodgy (using private function), but QueryResults can't handle
            # calling through to Cursor methods properly (and not loose its identity)
            doc = results._mapped_result(results.sort('energy', pymongo.ASCENDING).limit(1)[0])
            form = doc["pretty_formula"]

            formula_dict = self.lowest.get(form)
            if formula_dict is None:
                formula_dict = dict()
                self.lowest[form] = formula_dict

            formula_dict[doc["potential.params_id"]] = doc
            results.close()

    criteria = init_criteria(args)

    # Find out which two parameters the user want to create the map from
    params_range = lj.db_query.LennardJonesSearchRange()
    if "potential.params" in criteria:
        params_range = lj.db_query.LennardJonesSearchRange.from_dict(criteria.pop("potential.params"))

    map_params = list()
    for pair, interaction in params_range.interactions.iteritems():
        for param, value in interaction.__dict__.iteritems():
            if isinstance(value, splpy.interval.Interval):
                map_params.append("potential.params.{}.{}".format(pair, param))
    if len(map_params) != 2:
        print("Criteria {} does not contain two parameter ranges!".format(args.criteria))
        sys.exit(-1)
    map_params.sort()

    d = mgdb.util.get_settings(args.config_file)
    qe = LjQueryEngine(host=d["host"], port=d["port"], database=d["database"],
                       user=d["readonly_user"], password=d["readonly_password"],
                       collection=d["collection"], aliases_config=d.get("aliases_config", None))

    properties = ["pretty_formula", "potential.params_id"]
    # Special case for using the structure prototype as the property to map
    if args.property == 'prototype':
        properties.extend(["prototype_id", "spacegroup.symbol"])
    else:
        properties.append(args.property)
    properties.extend(map_params)

    ve = VisitationEngine(qe)
    params_query = splpy.lj.db_query.VisitParamPoints(params_range)
    ve.add(params_query)
    ve.add(splpy.lj.db_query.visit_distinct_formulae)

    _log.info("Searching database for map(s) in range {} "
              "containing {} parameter points".format(str(params_range),
                                                      params_query.num_points(qe)))
    lowest = dict()
    getter = LowestEnergyStore(lowest)
    ve.run_queries(getter, properties=properties, criteria=criteria)
    process_properties(args, lowest, qe)

    try:
        if args.settings:
            with open(args.settings, 'r') as settings_file:
                settings = yaml.load(settings_file)
                # Put in the axes labels
                settings.setdefault("xlabel", to_latex_string(map_params[0]))
                settings.setdefault("ylabel", to_latex_string(map_params[1]))
                # settings.setdefault("title", "{}, {}".format())
    except AttributeError:
        pass

    for formula, params_map in lowest.iteritems():
        filename = "{}.dat".format(formula)
        _log.info("Creating map from data in {}".format(filename))
        f = open(filename, 'w')
        for doc in params_map.itervalues():
            f.write("{},{},{}\n".format(doc[map_params[0]], doc[map_params[1]], doc[args.property]))
        f.close()
        args = ["smap", filename]
        proc = subprocess.Popen(args, stdout=subprocess.PIPE)
        output = StringIO.StringIO()
        output.write(proc.communicate()[0])
        output.seek(0, 0)
        splpy.map.draw_map(output, 'matplotlib', settings=settings, output_name=str(formula))
        output.close()


def tag_db(args):
    d = mgdb.util.get_settings(args.config_file)
    qe = LjQueryEngine(host=d["host"], port=d["port"], database=d["database"],
                       user=d["readonly_user"], password=d["readonly_password"],
                       collection=d["collection"], aliases_config=d.get("aliases_config", None))

    criteria = init_criteria(args)
    qe.params.update(criteria, {"$addToSet": {"tags": args.tag}})


def parse_sort_tokens(tokens):
    parsed = list()
    for token in tokens:
        if token[0] == 'D':
            parsed.append((token[1:], pymongo.DESCENDING))
        elif token[0] == 'A':
            parsed.append((token[1:], pymongo.ASCENDING))
        else:
            parsed.append((token, pymongo.ASCENDING))
    return parsed


def parse_criteria_or_die(crit):
    criteria = None
    if crit:
        try:
            criteria = json.loads(crit)
        except ValueError:
            print("Criteria {} is not a valid JSON string!".format(crit))
            sys.exit(-1)
    return criteria


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="""
    ljdb is a command line db management script for the splpy.lj database.
    It provides the facility to insert lj runs, perform queries and perform
    analysis on structures in the database.  Type ljdb -h to see the
    various options.
    \n\n
    Author: {}\n
    Version: {}\n
    Last updated: Aug 2 2014""".format(__author__, __version__))

    # Parents for all subparsers.
    parent_vb = argparse.ArgumentParser(add_help=False)
    parent_vb.add_argument('--quiet', '-q', dest='quiet', action="store_true", default=False,
                           help="Minimal verbosity.")
    parent_vb.add_argument('--verbose', '-v', dest='vb', action="count", default=0,
                           help="Print more verbose messages to standard error. Repeatable. (default=ERROR)")
    parent_cfg = argparse.ArgumentParser(add_help=False)
    parent_cfg.add_argument("-c", "--config", dest="config_file", type=str, default="ljdb.json",
                            help="Config file to use. Generate one using mgdb "
                                 "init --config filename.json if necessary. "
                                 "Otherwise, the code searches for an ljdb.json first"
                                 "then ~/.ljdb.json. If none is found, an no-authentication "
                                 "localhost:27017/lj database and structures "
                                 "collection is assumed.")

    # Init for all subparsers.
    subparsers = parser.add_subparsers()

    # The 'crawl' subcommand.
    pcrawl = subparsers.add_parser("crawl",
                                   help="Crawl the database performing normalisation, cleanup, etc. on entries.",
                                   parents=[parent_vb, parent_cfg])
    pcrawl.add_argument("--prototype", action='store_true', help="Assign a prototype to each structure")
    pcrawl.add_argument("--prune", action='store_true', help="Remove duplicate structure from each parameter point")
    pcrawl.add_argument("--refine", dest="refine", type=str, default=None,
                        help="Refine database by running spipe on all unique structures matching the "
                             "criteria up to a distance of --refine-dist away from all parameter "
                             "points in all parameter directions.  Takes the spipe yaml input as argument.")
    pcrawl.add_argument("--refine-dist", dest="refine_dist", type=float, default=0.1,
                        help="The distance away from each parameter point to refine to.")
    pcrawl.add_argument("--refine-limit", dest="refine_limit", type=int, default=None,
                        help="The number of top unique structure to take from each surrounding parameter point for refinement.")
    pcrawl.add_argument("--crit", dest="criteria", type=str, default=None,
                        help="Confine the crawl to entries matching this criteria "
                             "{\"pretty_formula\": \"AB\"}.")
    pcrawl.set_defaults(func=crawl_db)

    # The 'init' subcommand.
    pinit = subparsers.add_parser("init", help="Initialization tools.", parents=[parent_vb])
    pinit.add_argument("-c", "--config", dest="config_file", type=str,
                       nargs='?', default="ljdb.json",
                       help="Creates a db config file for the database. "
                            "Default filename is ljdb.json.")
    pinit.set_defaults(func=init_db)

    # The 'insert' subcommand.
    pinsert = subparsers.add_parser("insert",
                                    help="Insert structures into the database.",
                                    parents=[parent_vb, parent_cfg])
    pinsert.add_argument("directory", metavar="directory", type=str,
                         default=".", help="Root directory for runs.")
    pinsert.add_argument("-l", "--logfile", dest="logfile", type=str,
                         help="File to log db insertion. Defaults to stdout.")
    pinsert.add_argument("-t", "--tag", dest="tag", type=str, nargs=1,
                         default=[],
                         help="Tag your runs for easier search."
                              " Accepts multiple tags")
    pinsert.add_argument("-f", "--force", dest="force_insert",
                         action="store_true",
                         help="Force insert structures. WARNING: This disables the check for"
                              "duplicates which is much faster in large databases but can lead to"
                              "diplicate entries!")
    pinsert.add_argument("-u", "--update", dest="update_duplicates",
                         action="store_true",
                         help="Reanalyse and update any duplicates found (based on stored location on disk)")
    pinsert.add_argument("-a", "--author", dest="author", type=str, nargs=1,
                         default=getpass.getuser(),
                         help="Enter a *unique* author field so that you can "
                              "trace back what you ran.")
    pinsert.add_argument("-n", "--ncpus", dest="ncpus", type=int,
                         default=None,
                         help="Number of CPUs to use in inserting. If "
                              "not specified, multiprocessing will use "
                              "the number of cpus detected.")
    pinsert.set_defaults(func=update_db)

    # The 'query' subcommand.
    pquery = subparsers.add_parser("query",
                                   help="Query tools. Requires the "
                                        "use of pretty_table.",
                                   parents=[parent_vb, parent_cfg])
    pquery.add_argument("--crit", dest="criteria", type=str, default=None,
                        help="Query criteria in typical json format. E.g., "
                             "{\"task_id\": 1}.")
    pquery.add_argument("--stoich", dest="stoichiometry", type=Composition, default=None,
                        help="Search for structures with a particular stoichiometry e.g. AB2")
    pquery.add_argument("--props", dest="properties", type=str, default=[],
                        nargs='+', required=True,
                        help="Desired properties. Repeatable. E.g., pretty_formula, "
                             "task_id, energy...")
    pquery.add_argument("--sort", dest="sort", type=str, default=[],
                        nargs='+', required=False,
                        help="Property to sort the query by")
    pquery.add_argument("--limit", dest="limit", type=int, default=None,
                        help="Limit results according to sort criteria (if specified)")
    pquery.add_argument("--dump", dest="dump_json", action='store_true', default=False,
                        help="Simply dump results to JSON instead of a tabular view")
    pquery.set_defaults(func=query_db)

    # The 'get' subcommand.
    pget = subparsers.add_parser("get",
                                 help="Get structures from the database, same as query but saves structures.",
                                 parents=[parent_vb, parent_cfg])
    pget.add_argument("--crit", dest="criteria", type=str, default=None,
                      help="Query criteria in typical json format. E.g., "
                           "{\"task_id\": 1}.")
    pget.add_argument("--collection", dest="collection", type=str, default=None, required=False,
                      help="The collection to get the structures from.")
    pget.add_argument("--id", dest="id", type=str, default=None,
                      help="id of the structure to retrieve.")
    pget.add_argument("--sort", dest="sort", type=str, default=[],
                      nargs='+', required=False,
                      help="Property to sort the query by")
    pget.add_argument("--limit", dest="limit", type=int, default=None,
                      help="Limit results according to sort criteria (if specified)")
    pget.set_defaults(func=get_from_db)

    # The 'getunique' subcommand.
    pgetunique = subparsers.add_parser("getunique",
                                       help="Get the unique structures.",
                                       parents=[parent_vb, parent_cfg])
    pgetunique.add_argument("--crit", dest="criteria", type=str, default=None,
                            help="Query criteria in typical json format. E.g., "
                                 "{\"potential.params\": {\"A~B\": {\"sigma\": 1.5}}}.")
    pgetunique.add_argument("--limit", dest="limit", type=int, default=1,
                            help="From each point in parameter space and for each stoichiometry "
                                 "limit to this many structures")
    pgetunique.set_defaults(func=get_unique_from_db)

    # The 'map' subcommand.
    pmap = subparsers.add_parser("map",
                                 help="Create structure map using smap.",
                                 parents=[parent_vb, parent_cfg])
    pmap.add_argument("--crit", dest="criteria", type=str, default=None, required=True,
                      help="Query criteria in typical json format. E.g., "
                           "{\"potential.params.A~B.sigma\": \"[0.5, 1.5)\"}}}.")
    pmap.add_argument("--prop", dest="property", type=str, default="prototype",
                      required=False, help="Use this structure property to create the map from")
    pmap.add_argument("--stoich", dest="stoichiometry", type=Composition, default=None,
                      help="Search for structures with a particular stoichiometry e.g. AB2")
    pmap.add_argument("--settings", dest="settings", type=str, default=None,
                      help="A file defining settings for drawing the map (YAML format).")
    pmap.set_defaults(func=map_from_db)

    # The 'tag' subcommand
    ptag = subparsers.add_parser("tag",
                                 help="Tag structures matching the query.",
                                 parents=[parent_vb, parent_cfg])
    ptag.add_argument("--crit", dest="criteria", type=str, required=True,
                      help="Query criteria in typical json format. E.g., "
                           "{\"task_id\": 1}.")
    ptag.add_argument("-t", "--tag", dest="tag", type=str, nargs=1, required=True,
                      help="Tag your runs for easier search."
                           " Accepts multiple tags")
    ptag.set_defaults(func=tag_db)

    # Parse args
    args = parser.parse_args()

    splpy.util.init_logging(args, _log)

    if not os.path.exists(args.config_file):
        home_config = os.path.expanduser('~/.ljdb.json')
        if os.path.exists(home_config):
            args.config_file = home_config

    # Run appropriate subparser function.
    args.func(args)
